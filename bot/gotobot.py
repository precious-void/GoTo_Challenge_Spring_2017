# coding: utf8

import time as tm
import telebot
from telebot import types
import json
from threading import Timer
# —á—Ç–µ–Ω–∏–µ json —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
def readmembers():
    data = json.load(open('members.json', 'r', encoding='utf-8'))
    return data

# –∑–∞–ø–∏—Å—å –≤ json —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
def writemembers(text):
    with open("members.json", "w", encoding="utf-8") as file:
        json.dump(text, file)

# —á—Ç–µ–Ω–∏–µ json —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–º–µ–Ω–µ
def readinfo():
    data = json.load(open('info.json', 'r', encoding='utf-8'))
    return data

# –∑–∞–ø–∏—Å—å –≤ json —Ñ–∞–π–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ
def writeinfo(text):
    with open("info.json", "w", encoding="utf-8") as file:
        json.dump(text, file)

# —á—Ç–µ–Ω–∏–µ json —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–≤–µ—Å—Ç–µ
def readquest():
    data = json.load(open('quest.json', 'r', encoding='utf-8'))
    return data

# –∑–∞–ø–∏—Å—å –≤ json —Ñ–∞–π–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–µ
def writequest(text):
    with open("quest.json", "w", encoding="utf-8") as file:
        json.dump(text, file)

#—É–∑–Ω–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(readinfo()['token'])

# –§—É–Ω–∫—Ü–∏—è –§–°–ë: —É–∑–Ω–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def checker(message):
    members = readmembers()['members']
    idmember = ''
    nameofuser = ''
    typeofuser = 0
    for i in range(len(members)):
        if str(message.chat.id) == str(members[i]['id']):
            # idmember=int(members[i]['id'])
            idmember = i
            typeofuser = int(members[i]['admin'])
            if members[i]['name'] != '':
                nameofuser = members[i]['name']
    if idmember == '':
        return ([0, 0, 0])
    else:
        return ([typeofuser, idmember, nameofuser])

#–£–∫—Ä–∞—à–∞–µ–º –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def schedulizer(schedule):
    schedule = schedule.split("\n")
    for j in range(len(schedule)):
        schedule[j] = "<b>" + str(schedule[j][:5]) + "</b>" + str(schedule[j][5:])
    schedule = "\n".join(schedule)
    return schedule

# –Æ–∑–µ—Ä—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
usermarkup = types.ReplyKeyboardMarkup(True, False)
usermarkup.row('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '‚õ≥Ô∏è –°–æ–±—ã—Ç–∏–µ')
usermarkup.row('üèÖ –ê—á–∏–≤–∫–∏', '‚ùóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
usermarkup.row('üõ† –ö–æ–º–º–∞–Ω–¥—ã')
# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
adminmarkup = types.ReplyKeyboardMarkup(True, False)
adminmarkup.row('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '‚õ≥Ô∏è –°–æ–±—ã—Ç–∏–µ')
adminmarkup.row('üèÖ –ê—á–∏–≤–∫–∏', '‚ùóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
adminmarkup.row('üõ† –ö–æ–º–º–∞–Ω–¥—ã', 'üîí –ê–¥–º–∏–Ω–∫–∞')
# –ê–¥–º–∏–Ω–∫–∞
adminkamarkup = types.ReplyKeyboardMarkup(True, False)
adminkamarkup.row('üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üéñ –ê—á–∏–≤–∫–∏')
adminkamarkup.row('üè† –ì–¥–µ —è –∂–∏–≤—É?', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã')
adminkamarkup.row('‚úâÔ∏è –°—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
adminkamarkup.row('‚ùå –í—ã—Ö–æ–¥')
#–£–±—Ä–∞—Ç—å –∫–ª–∞–≤—É
hidemarkup = types.ReplyKeyboardRemove()


def eventmessanger():
    members = readmembers()['members']
    data = readinfo()['schedule']
    quest = readquest()
    if int(quest['quest']) == 1:
        if int(quest['activate']) == 0:
            usermarkup = types.ReplyKeyboardMarkup(True, False)
            usermarkup.row('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '‚õ≥Ô∏è –°–æ–±—ã—Ç–∏–µ')
            usermarkup.row('üèÖ –ê—á–∏–≤–∫–∏', '‚ùóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
            usermarkup.row('üõ† –ö–æ–º–º–∞–Ω–¥—ã','üéÆ –ö–≤–µ—Å—Ç')
            for j in range(len(members)):
                if int(members[j]['admin'])!=2:
                    bot.send_message(int(members[j]['id']),
                    "<b>–ù–∞—á–∞–ª–æ –∫–≤–µ—Å—Ç–∞!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É üéÆ –ö–≤–µ—Å—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /quest. –î–∞–ª–µ–µ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏! "
                    ,parse_mode="HTML",reply_markup=usermarkup)
            quest['activate']="1"
            writequest(quest)
    if data!='':
        schedule = schedulizer(data)
        localtime = int(tm.localtime()[3] * 60 + tm.localtime()[4])
        if localtime==8*60:
            for j in range(len(members)):
                bot.send_message(int(members[j]['id']), schedule,parse_mode="HTML")
        data = data.split("\n")
        times = data
        for i in range(len(times)):
            times[i] = times[i][:5]
            times[i] = int(times[i].split(":")[0]) * 60 + int(times[i].split(":")[1])
        for i in range(len(times)):
            if localtime == times[i]:
                data = readinfo()['schedule']
                data = data.split("\n")
                text=data[i]
                for j in range(len(members)):
                    bot.send_message(int(members[j]['id']), "<b>"+text[:5]+"</b>"+text[5:],parse_mode="HTML")
                break
        interval=Timer(59.0, eventmessanger)
        interval.start()
eventmessanger()

@bot.message_handler(commands=["start"])
def start(message):
    auth = checker(message)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "—Å—É—â–µ—Å—Ç–≤–æ–≤–Ω–∏–µ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if auth[0] == 0:
        start = bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤–≤–µ–¥–∏ –∫–æ–¥!")
        bot.register_next_step_handler(start, register)
    # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π —é–∑–µ—Ä
    elif auth[0] == 1:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, " + str(auth[2]) + ".", reply_markup=usermarkup)
        bot.send_sticker(message.chat.id, "CAADBAADXQcAAhXc8gKXC24wqNJ1GgI")
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω
    elif auth[0] == 2:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, " + str(auth[2]) + ".", reply_markup=adminmarkup)
        bot.send_sticker(message.chat.id, "CAADBAADXQcAAhXc8gKXC24wqNJ1GgI")

# –ï—Å–ª–∏ –Ω–æ–≤—ã–π —é–∑–µ—Ä - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü—è
def register(message):
    auth = checker(message)
    data = readmembers()
    authorized=0
    for i in range(len(data['members'])):
        if str(message.chat.id)==str(data['members'][i]['id']):
            authorized=1
            if str(message.text) == str(readinfo()['admincode']):
                bot.send_message(message.chat.id, "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, "+str(auth[2])+"!",reply_markup=adminmarkup)
                bot.send_sticker(message.chat.id,"CAADBAADWwcAAhXc8gIsyPgYvm7gcAI")
                data['members'][i]['admin']=2
                writemembers(data)
            if str(message.text) == str(readinfo()['usercode']):
                bot.send_message(message.chat.id, "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + str(auth[2])+"!", reply_markup=usermarkup)
                bot.send_sticker(message.chat.id, "CAADBAADWwcAAhXc8gIsyPgYvm7gcAI")
                data['members'][i]['admin'] = 1
                writemembers(data)
            if str(message.text) != str(readinfo()['usercode']) and str(message.text) != str(readinfo()['admincode']):
                wrong = bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥")
                bot.register_next_step_handler(wrong, register)

    if authorized==0:
        if str(message.text) == str(readinfo()['admincode']):
            data['members'].append({"id": str(message.chat.id), "admin": "2", "name": "", "achives": []})
            writemembers(data)
            reg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤–æ–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–í–∞—Å–∏–ª–∏–π –ü—É–ø–∫–∏–Ω¬ª.")
            bot.register_next_step_handler(reg, database)
        if str(message.text) == str(readinfo()['usercode']):
            data['members'].append({"id": str(message.chat.id), "admin": "1", "name": "", "achives": []})
            writemembers(data)
            reg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤–æ–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–í–∞—Å–∏–ª–∏–π –ü—É–ø–∫–∏–Ω¬ª.")
            bot.register_next_step_handler(reg, database)
        if str(message.text) != str(readinfo()['usercode']) and str(message.text) != str(readinfo()['admincode']):
            wrong = bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥")
            bot.register_next_step_handler(wrong, register)

def database(message):
    data = readmembers()
    auth = checker(message)
    data['members'][auth[1]]['name'] = message.text
    writemembers(data)
    if auth[0] == 1:
        bot.send_message(message.chat.id, "–•—ç–π, –ø—Ä–∏–≤–µ—Ç –¥—Ä—É–≥!", reply_markup=usermarkup)
    elif auth[0] == 2:
        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—à–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ!", reply_markup=adminmarkup)


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–∞–ª–∏–ª :(
@bot.message_handler(commands=["stop"])
def handle_stop(message):
    data = readmembers()
    auth = checker(message)
    data['members'][auth[1]]['admin']=0
    writemembers(data)
    bot.send_message(message.chat.id, "–¢—ã —É–∂–µ —É—Ö–æ–¥–∏—à—å...", reply_markup=hidemarkup)
    bot.send_sticker(message.chat.id, "CAADAgADdwoAAkKvaQABg_wS9u8cP_kC")


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!
@bot.message_handler(func=lambda message: message.text == "üõ† –ö–æ–º–º–∞–Ω–¥—ã" or message.text == "/help")
def handle_help(message):
    auth = checker(message)
    if auth[0] == 0:
        start(message)
    elif auth[0] == 1:
        bot.send_message(message.chat.id,
                         "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, /schedule - –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å\n‚õ≥Ô∏è –°–æ–±—ã—Ç–∏–µ, /event - ¬´–ß—Ç–æ –∏ –≥–¥–µ —Å–µ–π—á–∞—Å?¬ª\n‚ùóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, /info - ¬´–ì–¥–µ —è –∂–∏–≤—É?¬ª, –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\nüõ† –ö–æ–º–º–∞–Ω–¥—ã, /help - –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞.")
    elif auth[0] == 2:
        bot.send_message(message.chat.id,
                         "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, /schedule - –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å\n‚õ≥Ô∏è –°–æ–±—ã—Ç–∏–µ, /event - ¬´–ß—Ç–æ –∏ –≥–¥–µ —Å–µ–π—á–∞—Å?¬ª\n‚ùóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, /info - ¬´–ì–¥–µ —è –∂–∏–≤—É?¬ª, –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\nüõ† –ö–æ–º–º–∞–Ω–¥—ã, /help - –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞\n\nüîí –ê–¥–º–∏–Ω–∫–∞, /admin - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞,\nüìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, /editschedule - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è,\nüè† –ì–¥–µ —è –∂–∏–≤—É?, /editadress - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–∞—Ö –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞,\nüìû –¢–µ–ª–µ—Ñ–æ–Ω—ã, /editphones - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö,\n‚úâÔ∏è –°—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, /quickmessage - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å—Ä–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π,\n‚ùå –í—ã—Ö–æ–¥, /exit - –≤—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.")


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text == "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" or message.text == "/schedule")
def handle_schedule(message):
    auth = checker(message)
    if auth[0] != 0:
        # –ß–∏—Ç–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = str(readinfo()['schedule'])
        if schedule!='':
            schedule = schedulizer(schedule)
            bot.send_message(message.chat.id, str(schedule), parse_mode="HTML")
        else:
            bot.send_message(message.chat.id, "<b>–ï—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.</b>", parse_mode="HTML")
            bot.send_sticker(message.chat.id,"CAADAgADswoAAkKvaQABaMOVR9paPiQC")
    else:
        start(message)


# –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ –∫–∞–∫–∏—Ö-—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏—Ö –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è—Ö
@bot.message_handler(func=lambda message: message.text == "‚õ≥Ô∏è –°–æ–±—ã—Ç–∏–µ" or message.text == "/event")
def handle_event(message):
    auth = checker(message)
    if auth[0] != 0:
        data = readinfo()['schedule']
        if data!='':
            data = data.split("\n")
            times = data
            # –∫–∞–∫–æ–π-—Ç–æ —Å–ª–æ–∂–Ω—ã–π –∫–æ–¥ —Å –∫–æ—Å—Ç—ã–ª—è–º–∏ (–ª—É—á—à–µ –Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å)
            for j in range(len(times)):
                times[j] = times[j][:5]
                times[j] = int(times[j].split(":")[0]) * 60 + int(times[j].split(":")[1])
            localtime = int(tm.localtime()[3] * 60 + tm.localtime()[4])
            data = readinfo()['schedule']
            data = data.split("\n")
            for j in range(len(times) - 1):
                if localtime < times[j]:
                    text = data[j - 1]
                    text = "<b>" + text[:5] + "</b>" + text[5:]
                    bot.send_message(message.chat.id, str(text), parse_mode="HTML")
                    break
                if localtime < times[0]:
                    if times[0] - localtime < 120:
                        bot.send_message(message.chat.id, "–°–ª–µ–¥—É—é—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ" + str(data[0]))
                    else:
                        bot.send_message(message.chat.id, "–ë–æ–ª—å—à–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
                if j == (len(times) - 2):
                    if (localtime - times[-1]) < 120:
                        bot.send_message(message.chat.id, str(data[-1]))
                    else:
                        bot.send_message(message.chat.id, "–ë–æ–ª—å—à–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        else:
            bot.send_message(message.chat.id, "<b>–ï—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.</b>", parse_mode="HTML")
            bot.send_sticker(message.chat.id, "CAADAgADswoAAkKvaQABaMOVR9paPiQC")
    else:
        start(message)


# –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á–µ–≥–æ –æ–Ω –¥–æ–±–∏–ª—Å—è –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ (–û–±—ã—á–Ω–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç: "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—É—Å—Ç.")
@bot.message_handler(func=lambda message: message.text == "üèÖ –ê—á–∏–≤–∫–∏" or message.text == "/achives")
def achives(message):
    data = readmembers()
    auth = checker(message)
    if auth[0] != 0:
        achives = data['members'][auth[1]]['achives']
        if len(achives) != 0:
            new = []
            for i in range(len(achives)):
                new.append(achives[i]['name'] + "\n")
            new.reverse()
            stroke = ''
            for i in range(1, len(new) + 1):
                stroke += str(i - 1) + ". " + str(new[i - 1])
            bot.send_message(message.chat.id, stroke)
        else:
            bot.send_message(message.chat.id, "<b>–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞—á–∏–≤–æ–∫.</b>", parse_mode="HTML")
            bot.send_sticker(message.chat.id, "CAADBAADcAcAAhXc8gJyeBay5IC2QAI")
    else:
        start(message)


# –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –Ω—É–∂–Ω—É—é (–Ω–µ—Ç) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
@bot.message_handler(func=lambda message: message.text == "‚ùóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" or message.text == "/info")
def handle_info(message):
    auth = checker(message)
    if auth[0] != 0:
        markup = types.InlineKeyboardMarkup()
        whereilive = types.InlineKeyboardButton(text='üè° –ì–¥–µ —è –∂–∏–≤—É?', callback_data='whereilive')
        phones = types.InlineKeyboardButton(text='‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω—ã', callback_data='phones')
        markup.add(whereilive, phones)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=markup)
    else:
        start(message)


@bot.message_handler(func=lambda message: message.text == "üîí –ê–¥–º–∏–Ω–∫–∞" or message.text == "/admin")
def handle_admin(message):
    auth = checker(message)
    if auth[0] != 0:
        if auth[0] == 2:
            bot.send_message(message.chat.id, "<b>–í–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º</b>", parse_mode="HTML",
                             reply_markup=adminkamarkup)
        else:
            bot.send_sticker(message.chat.id, "CAADAgADQQoAApkvSwqnrw2BEeUQJwI")
    else:
        start(message)


@bot.message_handler(func=lambda message: message.text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" or message.text == "/editschedule")
def editschedule(message):
    auth = checker(message)
    if auth[0] != 0:
        if auth[0] == 2:
            cancel = types.InlineKeyboardMarkup()
            can = types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='continue')
            sub = types.InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='newschedule')
            cancel.add(can, sub)
            bot.send_message(message.chat.id,
                             "<b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n08:00 –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n20:00 –í—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ",
                             parse_mode="HTML", reply_markup=cancel)
        else:
            bot.send_sticker(message.chat.id, "CAADAgADQQoAApkvSwqnrw2BEeUQJwI")
    else:
        start(message)


def newschedule(message):
    data = readinfo()
    data['schedule'] = str(message.text)
    writeinfo(data)
    schedule = str(message.text)
    schedule = schedule.split("\n")
    for j in range(len(schedule)):
        schedule[j] = "<b>" + str(schedule[j][:5]) + "</b>" + str(schedule[j][5:])
    schedule = "\n".join(schedule)
    data = readmembers()
    for j in range(len(data['members'])):
        if str(data['members'][j]['id']) != str(message.chat.id):
            bot.send_message(int(data['members'][j]['id']), "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"+str(schedule), parse_mode="HTML")
    bot.send_message(message.chat.id, "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n", parse_mode="HTML",reply_markup=adminkamarkup)


@bot.message_handler(func=lambda message: message.text == "üè† –ì–¥–µ —è –∂–∏–≤—É?" or message.text == "/editadress")
def editadress(message):
    auth = checker(message)
    if auth[0] != 0:
        if auth[0] == 2:
            cancel = types.InlineKeyboardMarkup()
            can = types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='continue')
            sub = types.InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='newadress')
            cancel.add(can, sub)
            bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–∏.</b>", parse_mode="HTML",
                             reply_markup=cancel)
        else:
            bot.send_sticker(message.chat.id, "CAADAgADQQoAApkvSwqnrw2BEeUQJwI")
    else:
        start(message)


def newadress(message):
    data = readinfo()
    data['adress'] = str(message.text)
    writeinfo(data)
    for i in range(len(data['members'])):
        if str(data['members'][i]['id']) != str(message.chat.id):
            bot.send_message(int(data['members'][i]['id']), "<b>–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!</b>\n" + str(message.text),parse_mode="HTML")
    bot.send_message(message.chat.id, "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>", parse_mode="HTML")


@bot.message_handler(func=lambda message: message.text == "üìû –¢–µ–ª–µ—Ñ–æ–Ω—ã" or message.text == "/editphones")
def editphones(message):
    auth = checker(message)
    if auth[0] != 0:
        if auth[0] == 2:
            cancel = types.InlineKeyboardMarkup()
            can = types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='continue')
            sub = types.InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='newphones')
            cancel.add(can, sub)
            bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</b>", parse_mode="HTML",
                             reply_markup=cancel)
        else:
            bot.send_sticker(message.chat.id, "CAADAgADQQoAApkvSwqnrw2BEeUQJwI")
    else:
        start(message)


def newphones(message):
    data = readinfo()
    data['info'] = str(message.text)
    writeinfo(data)
    bot.send_message(message.chat.id, "<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>", parse_mode="HTML",
                     reply_markup=adminkamarkup)


@bot.message_handler(func=lambda message: message.text == "‚úâÔ∏è –°—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" or message.text == "/quickmessage")
def handle_quickmessage(message):
    auth = checker(message)
    if auth[0] != 0:
        if auth[0] == 2:
            cancel = types.InlineKeyboardMarkup()
            can = types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='continue')
            sub = types.InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='quickmessagesend')
            cancel.add(can, sub)
            bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>", parse_mode="HTML",
                             reply_markup=cancel)
        else:
            bot.send_sticker(message.chat.id, "CAADAgADQQoAApkvSwqnrw2BEeUQJwI")
    else:
        start(message)


def quickmessagesend(message):
    data = readmembers()
    for i in range(len(data['members'])):
        if str(data['members'][i]['id']) != str(message.chat.id):
            bot.send_message(int(data['members'][i]['id']), "<b>–°—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n" + str(message.text),parse_mode="HTML")
    bot.send_message(message.chat.id, "<b>–°—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n", parse_mode="HTML",
                     reply_markup=adminkamarkup)


@bot.message_handler(func=lambda message: message.text == "üéñ –ê—á–∏–≤–∫–∏" or message.text == "/editachives")
def handle_editachives(message):
    auth = checker(message)
    if auth[0] != 0:
        if auth[0] == 2:
            cancel = types.InlineKeyboardMarkup(row_width=3)
            can = types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='continue')
            sub = types.InlineKeyboardButton(text='üèÜ –í—ã–¥–∞—Ç—å –∞—á–∏–≤–∫—É', callback_data='giveachive')
            # delete=types.InlineKeyboardButton(text='‚ôªÔ∏è –£–¥–∞–ª–∏—Ç—å –∞—á–∏–≤–∫—É', callback_data='deleteachive')
            cancel.add(can)
            cancel.add(sub)
            # cancel.add(delete)
            bot.send_message(message.chat.id, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>", parse_mode="HTML", reply_markup=cancel)
        else:
            bot.send_sticker(message.chat.id, "CAADAgADQQoAApkvSwqnrw2BEeUQJwI")
    else:
        start(message)


def giveachive(message):
    text = message.text.split(" ")
    text[1] = " ".join(text[1:])
    if text[0][-1] == ".":
        text[0] = text[0].replace(".", "")
    if text[0].isdigit() == True:
        data = readmembers()
        data['members'][int(text[0])]['achives'].append({"name": str(text[1]), "adding": ""})
        markup = types.InlineKeyboardMarkup(row_width=2)
        add = types.InlineKeyboardButton(text='üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª', callback_data='addition')
        fin = types.InlineKeyboardButton(text='üéó –í—ã–¥–∞—Ç—å –∞—á–∏–≤–∫—É!', callback_data='giveaway')
        markup.add(add, fin)
        writemembers(data)
        bot.send_message(message.chat.id,
                         "<b>–ê—á–∏–≤–∫–∞ –≤—ã–¥–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–º–µ–Ω–µ–º: </b>" + str(
                             data['members'][int(text[0])]['name']) + "\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∞—á–∏–≤–∫–∏: </b>" + str(text[1])
                         , parse_mode="HTML", reply_markup=markup)
    else:
        a = bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–µ–Ω–æ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n\n–ü—Ä–∏–º–µ—Ä:</b>\n1. –ó–∞ —Ö—Ä–∞–±—Ä–æ—Å—Ç—å!",
                             parse_mode="HTML")
        bot.register_next_step_handler(a, giveachive)


@bot.message_handler(func=lambda message: message.text == "‚ùå –í—ã—Ö–æ–¥" or message.text == "/exit")
def exit(message):
    auth = checker(message)
    if auth[0] != 0:
        if auth[0] == 2:
            bot.send_message(message.chat.id, "<b>–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞</b>", parse_mode="HTML",
                             reply_markup=adminmarkup)
        else:
            bot.send_sticker(message.chat.id, "CAADAgADQQoAApkvSwqnrw2BEeUQJwI")
    else:
        start(message)


#–ö–≤–µ—Å—Ç–∏–∫–∏ ^_^
@bot.message_handler(func=lambda message: message.text == "üéÆ –ö–≤–µ—Å—Ç" or message.text == "/quest")
def handle_quest(message):
    auth = checker(message)
    if auth[0]!=0:
        quest = readquest()
        #–∑–∞–ø—É—Å–∫ –∫–≤–µ—Å—Ç–∞
        if int(quest['quest']) == 1:
            user=activequestion(message)
            if user==0:
                send = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç!")
                bot.register_next_step_handler(send, questregister)
            else:
                send=bot.send_message(message.chat.id, "<b>–í–æ–ø—Ä–æ—Å ‚Ññ"+str(int(user[1])+1)+"</b>\n"+str(user[0]),parse_mode="HTML")
                bot.register_next_step_handler(send, checkquestion)
    else:
        start(message)


def activequestion(message):
    quest=readquest()
    # –ª–∏—Å—Ç–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
    question=0

    for m in range(len(quest['groups'])):
        # –ª–∏—Å—Ç–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö
        for j in range(len(quest['groups'][m]['users'])):
            # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–∞—à–µ–ª—Å—è
            if str(message.chat.id) == str(quest['groups'][m]['users'][j]['id']):
                question = ''
                # –ª–∏—Å—Ç–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
                for n in range(len(quest["questions"])):
                    # –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
                    if str(quest["questions"][n]["id"]) == str(quest['groups'][m]['activequetsion']):
                        question = [quest["questions"][n]['question'],quest["questions"][n]["id"]]
    return question


def questregister(message):
    quest = readquest()
    x=0
    for i in range(len(quest['groups'])):
        if message.text==quest['groups'][i]['password']:
            x=1
            quest['groups'][i]['users'].append({"id":str(message.chat.id)})
            writequest(quest)
            send=bot.send_message(message.chat.id,"<b>–í–æ–ø—Ä–æ—Å ‚Ññ1</b>\n"+activequestion(message)[0],parse_mode="HTML")
            bot.register_next_step_handler(send,checkquestion)
    if x==0:
        send = bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω!", parse_mode="HTML")
        bot.register_next_step_handler(send, questregister)

def checkquestion(message):
    quest=readquest()
    question=activequestion(message)[1]
    right=False
    for i in range(len(quest['questions'])):
        if question==quest['questions'][i]['id']:
            if str(message.text)==str(quest['questions'][i]['answer']):
                right=True
                bot.send_message(message.chat.id,"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
                for m in range(len(quest['groups'])):
                    # –ª–∏—Å—Ç–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö
                    for j in range(len(quest['groups'][m]['users'])):
                        # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–∞—à–µ–ª—Å—è
                        if str(message.chat.id) == str(quest['groups'][m]['users'][j]['id']):
                            quest['groups'][m]['activequetsion']=int(quest['groups'][m]['activequetsion'])+1
                            question=quest['groups'][m]['activequetsion']
                            writequest(quest)
                            for k in range(len(quest['questions'])):
                                if int(quest['questions'][k]['id'])==question:
                                    text=quest['questions'][k]['question']
                            if len(quest['questions'])==question-1:
                                usermarkup = types.ReplyKeyboardMarkup(True, False)
                                usermarkup.row('üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '‚õ≥Ô∏è –°–æ–±—ã—Ç–∏–µ')
                                usermarkup.row('üèÖ –ê—á–∏–≤–∫–∏', '‚ùóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                                usermarkup.row('üõ† –ö–æ–º–º–∞–Ω–¥—ã')
                                for p in range(len(quest['groups'][m]['users'])):
                                    bot.send_message(int(quest['groups'][m]['users'][p]['id']),"–£—Ä–∞! –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∫–≤–µ—Å—Ç!",parse_mode="HTML",reply_markup=usermarkup)
                                quest['groups'][m]['finish']=str(tm.localtime()[3])+":"+str(tm.localtime()[4])+":"+str(tm.localtime()[5])
                                time=quest['groups'][m]['finish']
                                writequest(quest)
                                members=readmembers()['members']
                                for p in range(len(members)):
                                    if int(members[p]['admin'])==2:
                                        bot.send_message(members[p]['id'],"–ö–æ–º–∞–Ω–¥–∞ ‚Ññ"+str(m+1)+" –∑–∞–∫–æ–Ω—á–∏–ª–∞ –∫–≤–µ—Å—Ç –≤ "+str(time))
                            else:
                                for p in range(len(quest['groups'][m]['users'])):
                                    send=bot.send_message(int(quest['groups'][m]['users'][p]['id']),"<b>–í–æ–ø—Ä–æ—Å ‚Ññ"+str(question)+"</b>\n"+text,parse_mode="HTML")
                                    bot.register_next_step_handler(send,checkquestion)
    if right==False:
        send=bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        bot.register_next_step_handler(send,checkquestion)


@bot.callback_query_handler(func=lambda message: True)
def inline(message):
    if message.data == 'continue':
        bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                              text="<b>–î–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>", parse_mode="HTML")
    elif message.data == "newschedule":
        then = bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                     text="<b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n08:00 –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n20:00 –í—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ",
                                     parse_mode="HTML")
        bot.register_next_step_handler(then, newschedule)
    elif message.data == "newadress":
        then = bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                     text="<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–∏.</b>", parse_mode="HTML")
        bot.register_next_step_handler(then, newadress)
    elif message.data == "newphones":
        then = bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                     text="<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</b>", parse_mode="HTML")
        bot.register_next_step_handler(then, newphones)
    elif message.data == "quickmessagesend":
        then = bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                     text="<b>–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>", parse_mode="HTML")
        bot.register_next_step_handler(then, quickmessagesend)
    elif message.data == "whereilive":
        info = readinfo()['adress']
        if info!='':
            bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                              text="<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–∏.</b>\n\n" + str(info), parse_mode="HTML")
        else:
            bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                  text="<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏</b>", parse_mode="HTML")
            bot.send_sticker(message.message.chat.id,"CAADAgADswoAAkKvaQABaMOVR9paPiQC")
    elif message.data == "phones":
        info = readinfo()['info']
        if info!='':
            bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                              text="<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.</b>\n\n" + str(info), parse_mode="HTML")
        else:
            bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                  text="<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏</b>", parse_mode="HTML")
            bot.send_sticker(message.message.chat.id,"CAADAgADswoAAkKvaQABaMOVR9paPiQC")

    elif message.data == "giveachive":
        data = readmembers()['members']
        stroke = ''
        for i in range(1, len(data) + 1):
            if str(data[i - 1]['id']) != message.message.chat.id:
                stroke += str(i - 1) + ". " + str(data[i - 1]['name'])+"\n"
        add = bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                    text="<b>–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–¥–∞—Ç—å –∞—á–∏–≤–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—á–∏–≤–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. </b>\n\n"
                                         + str(stroke), parse_mode="HTML")
        bot.register_next_step_handler(add, giveachive)

    elif message.data == "giveaway":
        text = message.message.text[38:].split("\n")[0]
        data = readmembers()
        for i in range(len(data['members'])):
            if str(text).replace(" ", "") == str(data['members'][i]['name']).replace(" ", ""):
                bot.send_message(int(data['members'][i]['id']),
                                 "<b>–¢—ã –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—É—é –∞—á–∏–≤–∫—É!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: </b>" + str(
                                     data['members'][i]['achives'][-1]['name']),
                                 parse_mode="HTML")
                bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.message_id,
                                      text="<b>–¢—ã –≤—ã–¥–∞–ª –∞—á–∏–≤–∫—É!</b>",
                                      parse_mode="HTML")


# –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å –Ω–µ –ø—Ä–µ–¥–µ–ª!
if __name__ == '__main__':
    bot.polling(none_stop=True)